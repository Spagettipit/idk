import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.ArrayList;

public class Game {
public static final String scan = null;

private static Room currentRoom;

private static ArrayList<Item> inventory = new ArrayList<Item>();

public static HashMap<String, String> roomDescriptions = new HashMap<>();
    // Other class members and methods...

    public static HashMap<String, Room> roomMap = new HashMap<>();

public static GameGUI gui;


    World.buildWorld(); // Updated method call
    Scanner scanner = new Scanner(System.in);{

    // Game loop
    while (true) {
        System.out.print("Enter a command: ");
        String input = scanner.nextLine();

        // Process user input
        if (input.equalsIgnoreCase("talk")) {
            // Code for handling "talk" command
            Room currentRoom = // Get the current room where the player is located
            currentRoom.displayNPCs(); // Display NPCs in the room
            System.out.println("Who do you want to talk to? Enter NPC's name:");
            String npcName = scanner.nextLine();

            // Find the NPC by name in the current room and interact accordingly
            NPC npcToTalk = currentRoom.findNPCByName(npcName); // Implement this method in Room class

            if (npcToTalk != null) {
                npcToTalk.talk(); // Initiates dialog with the chosen NPC
            } else {
                System.out.println("No such NPC in this room.");
            }
        } else if (input.equalsIgnoreCase("exit")) {
            // Code to exit the game
            break;
        } else {
            System.out.println("Invalid command. Please try again.");
        }
    }

    scanner.close();
}

    World.buildWorld(); // Updated method call

    Scanner scanner1 = new Scanner(System.in);{

    // Game loop
    while (true) {
        System.out.print("Enter a command: ");
        String input = scanner.nextLine();

        // Process user input
        if (input.equalsIgnoreCase("look")) {
            // Code for handling "look" command
            // Retrieve current room's description or items present, etc.
            Room currentRoom = // Get the current room where the player is located
            (currentRoom).look(); // Display room description or items present

            // Check if the player wants to look at an NPC
            System.out.println("Do you want to look at an NPC? Enter NPC's name:");
            String npcNameToLook = scanner.nextLine();

            NPC npcToLook = currentRoom.findNPCByName(npcNameToLook); // Implement this method in Room class

            if (npcToLook != null) {
                npcToLook.look(); // Display NPC's description when looked at
            } else {
                System.out.println("No such NPC in this room.");
            }
        } else if (input.equalsIgnoreCase("exit")) {
            // Code to exit the game
            break;
        } else {
            System.out.println("Invalid command. Please try again.");
        }
    }

    scanner1.close();
}


    // Method to add rooms to the HashMap
    public static void addRoomToMap(String name, Room room) {
        roomMap.put(name, room);
    }



    public static void loadRoomDescriptions() {
        try {
            File file = new File("rooms.txt");
            Scanner scanner = new Scanner(file);
            String roomId = "";
            StringBuilder description = new StringBuilder();

            while (scanner.hasNextLine()) {
                String line = scanner.nextLine().trim();
                if (!line.isEmpty()) {
                    if (line.startsWith("#")) {
                        roomDescriptions.put(roomId, description.toString());
                        roomId = "";
                        description.setLength(0);
                    } else if (roomId.isEmpty()) {
                        roomId = line;
                    } else {
                        description.append(line).append("\n");
                    }
                }
            }
            scanner.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }








public static Room getCurrentRoom() {

return currentRoom;

}



public static void move(char direction) {

Room nextRoom = currentRoom.getExit(direction);

if (nextRoom != null) {

if (nextRoom.isLocked()) {

System.out.println("The room is locked!");

} else {

currentRoom = nextRoom;

System.out.println(currentRoom);

}

} else {

System.out.println("You can't go that way!");

}

}



public static Item getItem(String name) {

for (Item i : inventory)

if (i.getName().equals(name))

return i;

return null;

}


/*
 * public static void gameMethod() throws shit {
 *
 *          (PUT BASICALLY EVERYTHING IN THE WHILE LOOP HERE)
 *
 * }
 */

public static void main(String[] args) { //HEY!!! Basically, everything goes into

Scanner scan = new Scanner(System.in); //NO LONGER NECESSARY, ENTERING IN GOOEY WORKS NOW!!!

String playerCommand = "a"; //Also goes into gameMethod() method

String itemName;

Item i;

currentRoom = World.buildWorld(); //Stays in main method

System.out.println(currentRoom); // GURL WTF??? YOU'RE NOT USING A Game.print() METHOD?! FUUUUUCCCCCKKKKKKKK

while (!playerCommand.equals("x")) {

System.out.print("What do you want to do? ");

playerCommand = scan.nextLine();

String[] words = playerCommand.split(" ");

switch (words[0]) {

case "n":

case "s":

case "e":

case "w":

case "u":

case "d":

move(playerCommand.charAt(0));

break;

case "take":

itemName = words[1];

if (currentRoom.hasItem(itemName)) {

Item item = currentRoom.getItem(itemName);

if (item.isHeavy())

System.out.println("That's too heavy to carry around!");

else {

inventory.add(currentRoom.removeItem(itemName));

System.out.println("You pick up the " + itemName + ".");

}

} else {

System.out.println("There is no " + itemName + "!");

}

break;

case "look":

i = getItem(words[1]);

if (i == null)

i = currentRoom.getItem(words[1]);

if (i == null)

System.out.println("There is no " + words[1] + "!");

else

i.look();

break;

case "use":

i = getItem(words[1]);

if (i == null)

System.out.println("You don't have the " + words[1] + ".");

else

i.use();

break;

case "i":

if (inventory.isEmpty()) {

System.out.println("You are carrying nothing!");

} else {

for (Item it : inventory) {

System.out.println(it);

}

}

break;

case "x":

System.out.println("Okay. Bye!");

break;

default:

System.out.println("Invalid command.");

}

}

scan.close();

}

public static void print(String message) {

System.out.println(message+"\n");

}

public static void saveGame() {
    try {
        File saveFile = new File("save");
        saveFile.createNewFile();
        ObjectOutputStream stream = new ObjectOutputStream(new FileOutputStream(saveFile));
        stream.writeObject(currentRoom);
        stream.writeObject(inventory);
        stream.writeObject(roomMap);
        stream.close();
        Game.print("Game saved.");
    } catch (FileNotFoundException ex) {
        Game.print("Error accessing save file.");
    } catch (IOException ex) {
        Game.print("Error creating save file.");
        ex.printStackTrace();
    }
}

@SuppressWarnings("unchecked")
public static void loadGame() {
    try {
        File saveFile = new File("save");
        ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(saveFile));
        currentRoom = (Room) inputStream.readObject();
        inventory = (ArrayList<Item>) inputStream.readObject();
        roomMap = (HashMap<String, Room>) inputStream.readObject();
        inputStream.close();
        Game.print("Game loaded.");
    } catch (FileNotFoundException ex) {
        Game.print("Save file not found.");
    } catch (IOException | ClassNotFoundException ex) {
        Game.print("Error loading game.");
        ex.printStackTrace();
    }
}

public static void main1(String[] args) throws ClassNotFoundException, IOException {
currentRoom = World.buildWorld();
popDescs();
gui = new GameGUI();
GameGUI.room();
gui.updatePrompt("What do you want to do?");
      
}



private static void popDescs() {
	// TODO Auto-generated method stub
	
}



public static void drop(String name, boolean b) {
	// TODO Auto-generated method stub
	
}


}

